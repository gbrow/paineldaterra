{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gustavo\\\\Desktop\\\\paineldaterra\\\\src\\\\components\\\\ChartComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartComponent = ({\n  municipio\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    // Carregar o arquivo CSV e filtrar os dados pelo município\n    d3.dsv(';', '/assets/pr_af_area.csv').then(data => {\n      const filteredData = data.filter(row => row.mun === municipio);\n      console.log(\"Dados filtrados:\", filteredData);\n      const groupedData = processData(filteredData);\n      console.log(\"Dados agrupados:\", groupedData);\n\n      // Configurar os dados do gráfico\n      const chartConfig = {\n        labels: groupedData.labels,\n        datasets: [{\n          label: 'Agricultura Familiar',\n          data: groupedData.agriculturaFamiliar,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)'\n        }, {\n          label: 'Não Agricultura Familiar',\n          data: groupedData.naoAgriculturaFamiliar,\n          backgroundColor: 'rgba(255, 99, 132, 0.6)'\n        }]\n      };\n      setChartData(chartConfig);\n    });\n  }, [municipio]);\n  useEffect(() => {\n    if (chartData && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      new Chart(ctx, {\n        type: 'bar',\n        data: chartData,\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              beginAtZero: true\n            },\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [chartData]);\n  const processData = data => {\n    const labels = [];\n    const agriculturaFamiliar = [];\n    const naoAgriculturaFamiliar = [];\n    data.forEach(row => {\n      if (!labels.includes(row.grupos)) {\n        labels.push(row.grupos);\n        agriculturaFamiliar.push(0);\n        naoAgriculturaFamiliar.push(0);\n      }\n      const index = labels.indexOf(row.grupos);\n      agriculturaFamiliar[index] += +row.n_af_sim;\n      naoAgriculturaFamiliar[index] += +row.n_af_nao;\n    });\n    return {\n      labels,\n      agriculturaFamiliar,\n      naoAgriculturaFamiliar\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 12\n  }, this);\n};\n_s(ChartComponent, \"TOQB5kebCU3ZzBvmhTPu4rHmgFY=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","d3","jsxDEV","_jsxDEV","ChartComponent","municipio","_s","chartRef","chartData","setChartData","dsv","then","data","filteredData","filter","row","mun","console","log","groupedData","processData","chartConfig","labels","datasets","label","agriculturaFamiliar","backgroundColor","naoAgriculturaFamiliar","current","ctx","getContext","type","options","responsive","scales","x","beginAtZero","y","forEach","includes","grupos","push","index","indexOf","n_af_sim","n_af_nao","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Gustavo/Desktop/paineldaterra/src/components/ChartComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport * as d3 from 'd3';\r\n\r\nconst ChartComponent = ({ municipio }) => {\r\n    const chartRef = useRef(null);\r\n    const [chartData, setChartData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Carregar o arquivo CSV e filtrar os dados pelo município\r\n        d3.dsv(';', '/assets/pr_af_area.csv').then(data => {\r\n            const filteredData = data.filter(row => row.mun === municipio);\r\n            console.log(\"Dados filtrados:\", filteredData);\r\n\r\n            const groupedData = processData(filteredData);\r\n            console.log(\"Dados agrupados:\", groupedData);\r\n\r\n            // Configurar os dados do gráfico\r\n            const chartConfig = {\r\n                labels: groupedData.labels,\r\n                datasets: [\r\n                    {\r\n                        label: 'Agricultura Familiar',\r\n                        data: groupedData.agriculturaFamiliar,\r\n                        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n                    },\r\n                    {\r\n                        label: 'Não Agricultura Familiar',\r\n                        data: groupedData.naoAgriculturaFamiliar,\r\n                        backgroundColor: 'rgba(255, 99, 132, 0.6)',\r\n                    }\r\n                ]\r\n            };\r\n\r\n            setChartData(chartConfig);\r\n        });\r\n    }, [municipio]);\r\n\r\n    useEffect(() => {\r\n        if (chartData && chartRef.current) {\r\n            const ctx = chartRef.current.getContext('2d');\r\n            new Chart(ctx, {\r\n                type: 'bar',\r\n                data: chartData,\r\n                options: {\r\n                    responsive: true,\r\n                    scales: {\r\n                        x: {\r\n                            beginAtZero: true\r\n                        },\r\n                        y: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }, [chartData]);\r\n\r\n    const processData = (data) => {\r\n        const labels = [];\r\n        const agriculturaFamiliar = [];\r\n        const naoAgriculturaFamiliar = [];\r\n\r\n        data.forEach(row => {\r\n            if (!labels.includes(row.grupos)) {\r\n                labels.push(row.grupos);\r\n                agriculturaFamiliar.push(0);\r\n                naoAgriculturaFamiliar.push(0);\r\n            }\r\n\r\n            const index = labels.indexOf(row.grupos);\r\n            agriculturaFamiliar[index] += +row.n_af_sim;\r\n            naoAgriculturaFamiliar[index] += +row.n_af_nao;\r\n        });\r\n\r\n        return { labels, agriculturaFamiliar, naoAgriculturaFamiliar };\r\n    };\r\n\r\n    return <canvas ref={chartRef}></canvas>;\r\n};\r\n\r\nexport default ChartComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}